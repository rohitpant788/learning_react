import json
import logging
from typing import Dict, Any

logger = logging.getLogger()
logger.setLevel(logging.INFO)


class JsonObject:
    def __init__(self, data: str) -> None:
        self.__dict__ = json.loads(data)


class StringField:
    def __init__(self, serialized_name: str = None) -> None:
        self.serialized_name = serialized_name


class Network:
    def __init__(self, subnet: str = None, netmask: str = None) -> None:
        self.subnet = subnet
        self.netmask = netmask


class ClusterInfo:
    def __init__(self, name: str = None, region: str = None, networks: list = None) -> None:
        self.name = name
        self.region = region
        self.networks = [Network(**network) for network in (networks or [])]


class MergedData(JsonObject):
    def __init__(self, filename: str) -> None:
        with open(filename) as f:
            data = f.read()
        super().__init__(data)

        self.ClusterInfo = ClusterInfo
        self.clusterInfo = [self.ClusterInfo(**cluster) for cluster in self.clusterInfo1]


def process_merged_data() -> Dict[str, Any]:
    try:
        merged_data = MergedData('merged.json')
        for cluster in merged_data.clusterInfo:
            logger.info(f"Name: {cluster.name}")
            logger.info(f"Region: {cluster.region}")
            logger.info("Networks:")
            for network in cluster.networks:
                logger.info(f"\tSubnet: {network.subnet}")
                logger.info(f"\tNetmask: {network.netmask}")

        return {"statusCode": 200, "body": "Merged data processed successfully."}

    except Exception as e:
        logger.exception(f"Error processing merged data: {str(e)}")
        return {"statusCode": 500, "body": "Error processing merged data."}


def lambda_handler(event: dict, context: Any) -> Dict[str, Any]:
    logger.info("Lambda function invoked.")
    return process_merged_data()
